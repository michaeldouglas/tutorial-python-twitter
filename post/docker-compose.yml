version: '3.8' # Versão do Docker Compose
services:
  database:
    image: ${DATABASE_IMAGE} # Imagem do banco de dados
    container_name: ${DATABASE_CONTAINER_NAME} # Nome do container
    restart: always
    environment:
      MYSQL_DATABASE: ${DATABASE} # Banco de dados
      MYSQL_USER: ${DATABASE_USER} # Usuário do banco de dados
      MYSQL_PASSWORD: ${DATABASE_PASSWORD} # Senha do banco de dados
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD} # Senha root do banco de dados
    ports:
      - ${DATABASE_PORT} # Portal local e porta do docker
    volumes:
      - /tmp/data:/var/lib/mysql
  prometheus:
    image: ${PROMETHEUS_IMAGE} # Imagem do Prometheus
    container_name: ${PROMETHEUS_CONTAINER_NAME} # Nome do container
    ports:
      - ${PROMETHEUS_PORT} # Portal local e porta do docker
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    deploy:
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
  grafana:
    image: ${GRAFANA_IMAGE} # Imagem do grafana
    container_name: ${GRAFANA_CONTAINER_NAME} # Nome do container
    restart: always
    ports:
      - ${GRAFANA_PORT} # Porta do grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER} # Usuario do grafana
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD} # Senha do grafana
    volumes:
      - ./grafana_data:/var/lib/grafana
  mysql_exporter:
    image: ${DATABASE_MYSQL_EXPORTER_IMAGE} # Imagem do Mysql Exporter
    container_name: ${DATABASE_MYSQL_EXPORTER_CONTAINER_NAME} # Nome do container
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "${DATABASE_USER_ROOT}:${DATABASE_ROOT_PASSWORD}@(database:3306)/${DATABASE}?tls=false&parseTime=true"
      MYSQLD_EXPORTER_DISABLE_DEFAULT_METRICS: "false"
      MYSQLD_EXPORTER_SKIP_METRICS: "mysql_slave_.*,mysql_handler_*"
      EXTRA_OPTS: "--collect.perf_schema.cpu.eventsstatements=true --collect.perf_schema.memory.eventsstatements=true"
    command:
     - "--mysqld.username=${DATABASE_USER_ROOT}:${DATABASE_ROOT_PASSWORD}"
     - "--mysqld.address=database:3306"
    ports:
      - ${DATABASE_MYSQL_EXPORTER_PORT} # Portal do mysql exporter
    depends_on:
      - database
  zookeeper:
    image: ${ZOOKEEPER_IMAGE}
    networks: 
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TIME}
  kafka:
    image: ${KAFKA_IMAGE}
    networks: 
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "true"
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:29092"
      KAFKA_CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: "PLAINTEXT"
  schema-registry:
    container_name: schema_registry
    image: confluentinc/cp-schema-registry:latest
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    networks: 
      - broker-kafka
    depends_on:
      - kafka
  kafdrop:
    image: obsidiandynamics/kafdrop
    networks: 
      - broker-kafka
    depends_on:
      - kafka
      - schema-registry
    ports:
      - ${KAFDROP_PORT}:${KAFDROP_PORT}
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      KAFKA_REGISTRYCONNECT: schema-registry:8081  
  connect:
    image: cnfldemos/kafka-connect-datagen:0.6.2-7.5.0
    hostname: connect
    container_name: connect
    networks: 
      - broker-kafka
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:latest
    hostname: ksqldb-server
    container_name: ksqldb-server
    networks: 
      - broker-kafka
    depends_on:
      - kafka
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf http://localhost:8088/info || exit 1"]
      interval: 5s
      timeout: 20s
      retries: 5
  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:latest
    container_name: ksqldb-cli
    depends_on:
      - kafka
      - connect
      - ksqldb-server
    networks: 
      - broker-kafka
    entrypoint: /bin/sh
    tty: true
  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.5.0
    depends_on:
      - kafka
      - schema-registry
    networks: 
      - broker-kafka
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
volumes:
  grafana_data:
  prometheus_data:
networks: 
  broker-kafka:
    driver: bridge
