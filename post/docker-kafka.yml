version: '3.8' # Vers√£o do Docker Compose
services:
  zookeeper:
    image: ${ZOOKEEPER_IMAGE} # Imagem Docker para Zookeeper
    networks: 
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT} # Porta do cliente Zookeeper
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TIME} # Tempo do tick do Zookeeper
  kafka:
    image: ${KAFKA_IMAGE} # Imagem Docker para Kafka
    container_name: ${KAFKA_CONTAINER_NAME} # Nome do container Kafka
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT} # Porta Kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "true"
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:29092"
      KAFKA_CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: "PLAINTEXT"
  kafka2:
    image: ${KAFKA_IMAGE} # Imagem Docker para Kafka
    container_name: ${KAFKA2_CONTAINER_NAME} # Nome do container Kafka
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA2_PORT} # Porta Kafka
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "true"
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka2:29091"
      KAFKA_CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: "PLAINTEXT"
  kafka3:
    image: ${KAFKA_IMAGE} # Imagem Docker para Kafka
    container_name: ${KAFKA3_CONTAINER_NAME} # Nome do container Kafka
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA3_PORT} # Porta Kafka
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "true"
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka3:29093"
      KAFKA_CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: "PLAINTEXT"
  schema-registry:
    image: ${SCHEMA_REGISTRY_IMAGE} # Imagem Docker para Schema Registry
    container_name: ${SCHEMA_REGISTRY_CONTAINER_NAME} # Nome do container Schema Registry
    ports:
      - ${SCHEMA_REGISTRY_PORT} # Porta do Schema Registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_COMPATIBILITY: "FULL"
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: GET,POST,PUT,DELETE,OPTIONS,HEAD
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*' 
    networks: 
      - broker-kafka
    depends_on:
      - kafka
  schema-registry-ui:
    image: ${SCHEMA_REGISTRY_UI_IMAGE} # Imagem Docker para a interface do Schema Registry
    container_name: ${SCHEMA_REGISTRY_UI_CONTAINER_NAME} # Nome do container da interface do Schema Registry
    environment:
      SCHEMAREGISTRY_URL: "http://localhost:8081"
      SCHEMA_REGISTRY_UI_BASIC_AUTH_USER: "admin"
      SCHEMA_REGISTRY_UI_BASIC_AUTH_PASS: "admin"
    ports:
      - ${SCHEMA_REGISTRY_UI_PORT} # Porta da interface do Schema Registry
    depends_on:
      - schema-registry
    networks: 
      - broker-kafka
  kafdrop:
    image: ${KAFDROP_IMAGE} # Imagem Docker para Kafdrop
    container_name: ${KAFDROP_CONTAINER_NAME} # Nome do container Kafdrop
    networks: 
      - broker-kafka
    depends_on:
      - kafka
      - schema-registry
    ports:
      - ${KAFDROP_PORT}:${KAFDROP_PORT} # Porta do Kafdrop
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      KAFKA_REGISTRYCONNECT: schema-registry:8081 
  connect:
    image: ${CONNECT_IMAGE} # Imagem Docker para Kafka Connect
    hostname: ${CONNECT_CONTAINER_NAME}
    container_name: ${CONNECT_CONTAINER_NAME}
    networks: 
      - broker-kafka
    depends_on:
      - kafka
      - schema-registry
    ports:
      - ${CONNECT_PORT} # Porta do Kafka Connect
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
  ksqldb-server:
    image: ${KSQLDB_IMAGE} # Imagem Docker para ksqlDB
    hostname: ${KSQLDB_CONTAINER_NAME}
    container_name: ${KSQLDB_CONTAINER_NAME}
    networks: 
      - broker-kafka
    depends_on:
      - kafka
      - connect
    ports:
      - ${KSQLDB_PORT} # Porta do ksqlDB
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf http://localhost:8088/info || exit 1"]
      interval: 5s
      timeout: 20s
      retries: 5
  ksqldb-cli:
    image: ${KSQLDB_CLI_IMAGE} # Imagem Docker para ksqlDB CLI
    container_name: ${KSQLDB_CLI_CONTAINER_NAME} # Nome do container ksqlDB CLI
    depends_on:
      - kafka
      - connect
      - ksqldb-server
    networks: 
      - broker-kafka
    entrypoint: /bin/sh
    tty: true
  rest-proxy:
    image: ${REST_PROXY_IMAGE} # Imagem Docker para Kafka REST Proxy
    depends_on:
      - kafka
      - schema-registry
    networks: 
      - broker-kafka
    ports:
      - ${REST_PROXY_PORT} # Porta do Kafka REST Proxy
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

networks: 
  broker-kafka:
    driver: bridge